{-# LANGUAGE DeriveDataTypeable #-}
-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module AbsLI where

import Data.Generics
import qualified Data.String
import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Read, Show)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString, Data)

newtype Program = Prog [Function]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Function = Fun Ident [Ident] Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
  = EIf Exp Exp Exp
  | EAdd Exp Exp
  | ESub Exp Exp
  | EMul Exp Exp
  | EDiv Exp Exp
  | Call Ident [Exp]
  | EInt Integer
  | EVar Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data)

data Exp'
  = EIf' Exp' Exp' Exp'
  | EAdd' Exp' Exp'
  | ESub' Exp' Exp'
  | EMul' Exp' Exp'
  | EDiv' Exp' Exp'
  | EInt' Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)
